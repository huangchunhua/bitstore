// Code generated by protoc-gen-go. DO NOT EDIT.
// source: manage_server.proto

package manage_server_pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Heartbeat struct {
	Ip                   string                      `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Port                 uint32                      `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	PublicUrl            string                      `protobuf:"bytes,3,opt,name=public_url,json=publicUrl,proto3" json:"public_url,omitempty"`
	MaxVolumeCount       uint32                      `protobuf:"varint,4,opt,name=max_volume_count,json=maxVolumeCount,proto3" json:"max_volume_count,omitempty"`
	MaxFileKey           uint64                      `protobuf:"varint,5,opt,name=max_file_key,json=maxFileKey,proto3" json:"max_file_key,omitempty"`
	DataCenter           string                      `protobuf:"bytes,6,opt,name=data_center,json=dataCenter,proto3" json:"data_center,omitempty"`
	Rack                 string                      `protobuf:"bytes,7,opt,name=rack,proto3" json:"rack,omitempty"`
	AdminPort            uint32                      `protobuf:"varint,8,opt,name=admin_port,json=adminPort,proto3" json:"admin_port,omitempty"`
	Volumes              []*VolumeInformationMessage `protobuf:"bytes,9,rep,name=volumes,proto3" json:"volumes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *Heartbeat) Reset()         { *m = Heartbeat{} }
func (m *Heartbeat) String() string { return proto.CompactTextString(m) }
func (*Heartbeat) ProtoMessage()    {}
func (*Heartbeat) Descriptor() ([]byte, []int) {
	return fileDescriptor_55004e22665afe7b, []int{0}
}

func (m *Heartbeat) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Heartbeat.Unmarshal(m, b)
}
func (m *Heartbeat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Heartbeat.Marshal(b, m, deterministic)
}
func (m *Heartbeat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Heartbeat.Merge(m, src)
}
func (m *Heartbeat) XXX_Size() int {
	return xxx_messageInfo_Heartbeat.Size(m)
}
func (m *Heartbeat) XXX_DiscardUnknown() {
	xxx_messageInfo_Heartbeat.DiscardUnknown(m)
}

var xxx_messageInfo_Heartbeat proto.InternalMessageInfo

func (m *Heartbeat) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *Heartbeat) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *Heartbeat) GetPublicUrl() string {
	if m != nil {
		return m.PublicUrl
	}
	return ""
}

func (m *Heartbeat) GetMaxVolumeCount() uint32 {
	if m != nil {
		return m.MaxVolumeCount
	}
	return 0
}

func (m *Heartbeat) GetMaxFileKey() uint64 {
	if m != nil {
		return m.MaxFileKey
	}
	return 0
}

func (m *Heartbeat) GetDataCenter() string {
	if m != nil {
		return m.DataCenter
	}
	return ""
}

func (m *Heartbeat) GetRack() string {
	if m != nil {
		return m.Rack
	}
	return ""
}

func (m *Heartbeat) GetAdminPort() uint32 {
	if m != nil {
		return m.AdminPort
	}
	return 0
}

func (m *Heartbeat) GetVolumes() []*VolumeInformationMessage {
	if m != nil {
		return m.Volumes
	}
	return nil
}

type HeartbeatResponse struct {
	VolumeSizeLimit      uint64   `protobuf:"varint,1,opt,name=volumeSizeLimit,proto3" json:"volumeSizeLimit,omitempty"`
	SecretKey            string   `protobuf:"bytes,2,opt,name=secretKey,proto3" json:"secretKey,omitempty"`
	Leader               string   `protobuf:"bytes,3,opt,name=leader,proto3" json:"leader,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HeartbeatResponse) Reset()         { *m = HeartbeatResponse{} }
func (m *HeartbeatResponse) String() string { return proto.CompactTextString(m) }
func (*HeartbeatResponse) ProtoMessage()    {}
func (*HeartbeatResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_55004e22665afe7b, []int{1}
}

func (m *HeartbeatResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HeartbeatResponse.Unmarshal(m, b)
}
func (m *HeartbeatResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HeartbeatResponse.Marshal(b, m, deterministic)
}
func (m *HeartbeatResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeartbeatResponse.Merge(m, src)
}
func (m *HeartbeatResponse) XXX_Size() int {
	return xxx_messageInfo_HeartbeatResponse.Size(m)
}
func (m *HeartbeatResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_HeartbeatResponse.DiscardUnknown(m)
}

var xxx_messageInfo_HeartbeatResponse proto.InternalMessageInfo

func (m *HeartbeatResponse) GetVolumeSizeLimit() uint64 {
	if m != nil {
		return m.VolumeSizeLimit
	}
	return 0
}

func (m *HeartbeatResponse) GetSecretKey() string {
	if m != nil {
		return m.SecretKey
	}
	return ""
}

func (m *HeartbeatResponse) GetLeader() string {
	if m != nil {
		return m.Leader
	}
	return ""
}

type VolumeInformationMessage struct {
	Id                   uint32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Size                 uint64   `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Collection           string   `protobuf:"bytes,3,opt,name=collection,proto3" json:"collection,omitempty"`
	FileCount            uint64   `protobuf:"varint,4,opt,name=file_count,json=fileCount,proto3" json:"file_count,omitempty"`
	DeleteCount          uint64   `protobuf:"varint,5,opt,name=delete_count,json=deleteCount,proto3" json:"delete_count,omitempty"`
	DeletedByteCount     uint64   `protobuf:"varint,6,opt,name=deleted_byte_count,json=deletedByteCount,proto3" json:"deleted_byte_count,omitempty"`
	ReadOnly             bool     `protobuf:"varint,7,opt,name=read_only,json=readOnly,proto3" json:"read_only,omitempty"`
	ReplicaPlacement     uint32   `protobuf:"varint,8,opt,name=replica_placement,json=replicaPlacement,proto3" json:"replica_placement,omitempty"`
	Version              uint32   `protobuf:"varint,9,opt,name=version,proto3" json:"version,omitempty"`
	Ttl                  uint32   `protobuf:"varint,10,opt,name=ttl,proto3" json:"ttl,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VolumeInformationMessage) Reset()         { *m = VolumeInformationMessage{} }
func (m *VolumeInformationMessage) String() string { return proto.CompactTextString(m) }
func (*VolumeInformationMessage) ProtoMessage()    {}
func (*VolumeInformationMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_55004e22665afe7b, []int{2}
}

func (m *VolumeInformationMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VolumeInformationMessage.Unmarshal(m, b)
}
func (m *VolumeInformationMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VolumeInformationMessage.Marshal(b, m, deterministic)
}
func (m *VolumeInformationMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VolumeInformationMessage.Merge(m, src)
}
func (m *VolumeInformationMessage) XXX_Size() int {
	return xxx_messageInfo_VolumeInformationMessage.Size(m)
}
func (m *VolumeInformationMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_VolumeInformationMessage.DiscardUnknown(m)
}

var xxx_messageInfo_VolumeInformationMessage proto.InternalMessageInfo

func (m *VolumeInformationMessage) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *VolumeInformationMessage) GetSize() uint64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *VolumeInformationMessage) GetCollection() string {
	if m != nil {
		return m.Collection
	}
	return ""
}

func (m *VolumeInformationMessage) GetFileCount() uint64 {
	if m != nil {
		return m.FileCount
	}
	return 0
}

func (m *VolumeInformationMessage) GetDeleteCount() uint64 {
	if m != nil {
		return m.DeleteCount
	}
	return 0
}

func (m *VolumeInformationMessage) GetDeletedByteCount() uint64 {
	if m != nil {
		return m.DeletedByteCount
	}
	return 0
}

func (m *VolumeInformationMessage) GetReadOnly() bool {
	if m != nil {
		return m.ReadOnly
	}
	return false
}

func (m *VolumeInformationMessage) GetReplicaPlacement() uint32 {
	if m != nil {
		return m.ReplicaPlacement
	}
	return 0
}

func (m *VolumeInformationMessage) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *VolumeInformationMessage) GetTtl() uint32 {
	if m != nil {
		return m.Ttl
	}
	return 0
}

func init() {
	proto.RegisterType((*Heartbeat)(nil), "manage_server_pb.Heartbeat")
	proto.RegisterType((*HeartbeatResponse)(nil), "manage_server_pb.HeartbeatResponse")
	proto.RegisterType((*VolumeInformationMessage)(nil), "manage_server_pb.VolumeInformationMessage")
}

func init() { proto.RegisterFile("manage_server.proto", fileDescriptor_55004e22665afe7b) }

var fileDescriptor_55004e22665afe7b = []byte{
	// 511 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x93, 0xef, 0x6e, 0xd3, 0x3c,
	0x14, 0xc6, 0xdf, 0x64, 0x79, 0xbb, 0xe6, 0x74, 0x1d, 0x9d, 0x91, 0x50, 0xc4, 0xf8, 0x53, 0xca,
	0x97, 0x08, 0x50, 0x85, 0xc6, 0x1d, 0x6c, 0x08, 0x81, 0x06, 0x62, 0xca, 0x04, 0x7c, 0xb4, 0xdc,
	0xe4, 0x6c, 0xb2, 0xe6, 0xd8, 0x91, 0xed, 0x56, 0xcd, 0xae, 0x8b, 0x4b, 0xe0, 0xc2, 0x90, 0x4f,
	0x9a, 0x16, 0x86, 0xe0, 0xdb, 0xf1, 0xef, 0x3c, 0x8e, 0x4f, 0x9e, 0xc7, 0x86, 0xfb, 0xb5, 0xd0,
	0xe2, 0x1a, 0xb9, 0x43, 0xbb, 0x42, 0x3b, 0x6f, 0xac, 0xf1, 0x86, 0x4d, 0x7e, 0x83, 0xbc, 0x59,
	0xcc, 0xbe, 0xc7, 0x90, 0xbe, 0x47, 0x61, 0xfd, 0x02, 0x85, 0x67, 0x87, 0x10, 0xcb, 0x26, 0x8b,
	0xa6, 0x51, 0x9e, 0x16, 0xb1, 0x6c, 0x18, 0x83, 0xa4, 0x31, 0xd6, 0x67, 0xf1, 0x34, 0xca, 0xc7,
	0x05, 0xd5, 0xec, 0x31, 0x40, 0xb3, 0x5c, 0x28, 0x59, 0xf2, 0xa5, 0x55, 0xd9, 0x1e, 0x69, 0xd3,
	0x8e, 0x7c, 0xb1, 0x8a, 0xe5, 0x30, 0xa9, 0xc5, 0x9a, 0xaf, 0x8c, 0x5a, 0xd6, 0xc8, 0x4b, 0xb3,
	0xd4, 0x3e, 0x4b, 0x68, 0xfb, 0x61, 0x2d, 0xd6, 0x5f, 0x09, 0x9f, 0x05, 0xca, 0xa6, 0x70, 0x10,
	0x94, 0x57, 0x52, 0x21, 0xbf, 0xc1, 0x36, 0xfb, 0x7f, 0x1a, 0xe5, 0x49, 0x01, 0xb5, 0x58, 0xbf,
	0x93, 0x0a, 0xcf, 0xb1, 0x65, 0x4f, 0x61, 0x54, 0x09, 0x2f, 0x78, 0x89, 0xda, 0xa3, 0xcd, 0x06,
	0x74, 0x16, 0x04, 0x74, 0x46, 0x24, 0xcc, 0x67, 0x45, 0x79, 0x93, 0xed, 0x53, 0x87, 0xea, 0x30,
	0x9f, 0xa8, 0x6a, 0xa9, 0x39, 0x4d, 0x3e, 0xa4, 0xa3, 0x53, 0x22, 0x17, 0x61, 0xfc, 0xb7, 0xb0,
	0xdf, 0xcd, 0xe6, 0xb2, 0x74, 0xba, 0x97, 0x8f, 0x4e, 0x5e, 0xcc, 0xef, 0x9a, 0x32, 0xef, 0xa6,
	0xfc, 0xa0, 0xaf, 0x8c, 0xad, 0x85, 0x97, 0x46, 0x7f, 0x42, 0xe7, 0xc4, 0x35, 0x16, 0xfd, 0xd6,
	0x99, 0x83, 0xa3, 0xad, 0x6b, 0x05, 0xba, 0xc6, 0x68, 0x87, 0x2c, 0x87, 0x7b, 0x5d, 0xff, 0x52,
	0xde, 0xe2, 0x47, 0x59, 0x4b, 0x4f, 0x56, 0x26, 0xc5, 0x5d, 0xcc, 0x1e, 0x41, 0xea, 0xb0, 0xb4,
	0xe8, 0xcf, 0xb1, 0x25, 0x73, 0xd3, 0x62, 0x07, 0xd8, 0x03, 0x18, 0x28, 0x14, 0x15, 0xda, 0x8d,
	0xbb, 0x9b, 0xd5, 0xec, 0x47, 0x0c, 0xd9, 0xdf, 0x46, 0xa3, 0xe8, 0x2a, 0x3a, 0x6f, 0x5c, 0xc4,
	0xb2, 0x0a, 0xd6, 0x38, 0x79, 0x8b, 0xf4, 0xf5, 0xa4, 0xa0, 0x9a, 0x3d, 0x01, 0x28, 0x8d, 0x52,
	0x58, 0x86, 0x8d, 0x9b, 0x8f, 0xff, 0x42, 0x82, 0x75, 0x94, 0xc6, 0x2e, 0xb5, 0xa4, 0x48, 0x03,
	0xe9, 0x02, 0x7b, 0x06, 0x07, 0x15, 0x2a, 0xf4, 0xbd, 0xa0, 0x0b, 0x6c, 0xd4, 0xb1, 0x4e, 0xf2,
	0x0a, 0x58, 0xb7, 0xac, 0xf8, 0xa2, 0xdd, 0x0a, 0x07, 0x24, 0x9c, 0x6c, 0x3a, 0xa7, 0x6d, 0xaf,
	0x3e, 0x86, 0xd4, 0xa2, 0xa8, 0xb8, 0xd1, 0xaa, 0xa5, 0x0c, 0x87, 0xc5, 0x30, 0x80, 0xcf, 0x5a,
	0xb5, 0xec, 0x25, 0x1c, 0x59, 0x6c, 0x94, 0x2c, 0x05, 0x6f, 0x94, 0x28, 0xb1, 0x46, 0xdd, 0xc7,
	0x39, 0xd9, 0x34, 0x2e, 0x7a, 0xce, 0x32, 0xd8, 0x5f, 0xa1, 0x75, 0xe1, 0xb7, 0x52, 0x92, 0xf4,
	0x4b, 0x36, 0x81, 0x3d, 0xef, 0x55, 0x06, 0x44, 0x43, 0x79, 0x52, 0xc2, 0xf0, 0x54, 0x7a, 0xe7,
	0x8d, 0x45, 0xf6, 0x0d, 0xc6, 0x97, 0xa8, 0xab, 0xdd, 0x0b, 0x38, 0xfe, 0xf3, 0x36, 0x6c, 0x9b,
	0x0f, 0x9f, 0xff, 0xa3, 0xd9, 0xdf, 0x82, 0xd9, 0x7f, 0x79, 0xf4, 0x3a, 0x5a, 0x0c, 0xe8, 0xc1,
	0xbd, 0xf9, 0x19, 0x00, 0x00, 0xff, 0xff, 0x98, 0x92, 0x76, 0xde, 0x87, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BitstoreClient is the client API for Bitstore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BitstoreClient interface {
	SendHeartbeat(ctx context.Context, opts ...grpc.CallOption) (Bitstore_SendHeartbeatClient, error)
}

type bitstoreClient struct {
	cc *grpc.ClientConn
}

func NewBitstoreClient(cc *grpc.ClientConn) BitstoreClient {
	return &bitstoreClient{cc}
}

func (c *bitstoreClient) SendHeartbeat(ctx context.Context, opts ...grpc.CallOption) (Bitstore_SendHeartbeatClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Bitstore_serviceDesc.Streams[0], "/manage_server_pb.Bitstore/SendHeartbeat", opts...)
	if err != nil {
		return nil, err
	}
	x := &bitstoreSendHeartbeatClient{stream}
	return x, nil
}

type Bitstore_SendHeartbeatClient interface {
	Send(*Heartbeat) error
	Recv() (*HeartbeatResponse, error)
	grpc.ClientStream
}

type bitstoreSendHeartbeatClient struct {
	grpc.ClientStream
}

func (x *bitstoreSendHeartbeatClient) Send(m *Heartbeat) error {
	return x.ClientStream.SendMsg(m)
}

func (x *bitstoreSendHeartbeatClient) Recv() (*HeartbeatResponse, error) {
	m := new(HeartbeatResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BitstoreServer is the server API for Bitstore service.
type BitstoreServer interface {
	SendHeartbeat(Bitstore_SendHeartbeatServer) error
}

// UnimplementedBitstoreServer can be embedded to have forward compatible implementations.
type UnimplementedBitstoreServer struct {
}

func (*UnimplementedBitstoreServer) SendHeartbeat(srv Bitstore_SendHeartbeatServer) error {
	return status.Errorf(codes.Unimplemented, "method SendHeartbeat not implemented")
}

func RegisterBitstoreServer(s *grpc.Server, srv BitstoreServer) {
	s.RegisterService(&_Bitstore_serviceDesc, srv)
}

func _Bitstore_SendHeartbeat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BitstoreServer).SendHeartbeat(&bitstoreSendHeartbeatServer{stream})
}

type Bitstore_SendHeartbeatServer interface {
	Send(*HeartbeatResponse) error
	Recv() (*Heartbeat, error)
	grpc.ServerStream
}

type bitstoreSendHeartbeatServer struct {
	grpc.ServerStream
}

func (x *bitstoreSendHeartbeatServer) Send(m *HeartbeatResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *bitstoreSendHeartbeatServer) Recv() (*Heartbeat, error) {
	m := new(Heartbeat)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Bitstore_serviceDesc = grpc.ServiceDesc{
	ServiceName: "manage_server_pb.Bitstore",
	HandlerType: (*BitstoreServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendHeartbeat",
			Handler:       _Bitstore_SendHeartbeat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "manage_server.proto",
}
